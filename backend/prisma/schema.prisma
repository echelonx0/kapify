// backend/prisma/schema.prisma
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = "file:./dev.db"
}

model User {
  id               String            @id @default(cuid())
  email            String            @unique
  password         String
  firstName        String
  lastName         String
  phone            String?
  userType         String            // 'sme' | 'funder' | 'admin' | 'consultant'
  status           String            @default("active") // 'active' | 'inactive' | 'suspended' | 'pending_verification'
  emailVerified    Boolean           @default(false)
  phoneVerified    Boolean           @default(false)
  accountTier      String            @default("basic") // 'basic' | 'premium' | 'enterprise'
  profilePicture   String?
  lastLoginAt      DateTime?
  createdAt        DateTime          @default(now())
  updatedAt        DateTime          @updatedAt

  // Relations
  profile          UserProfile?
  refreshTokens    RefreshToken[]
  organizationUsers OrganizationUser[]
  applications     Application[]
  
  @@map("users")
}

model UserProfile {
  id                   String    @id @default(cuid())
  userId               String    @unique
  displayName          String?
  bio                  String?
  profileStep          Int       @default(0)
  completionPercentage Int       @default(0)
  avatarUrl            String?
  preferences          String?   // JSON string for SQLite compatibility
  isActive             Boolean   @default(true)
  isVerified           Boolean   @default(false)
  verifiedAt           DateTime?
  createdAt            DateTime  @default(now())
  updatedAt            DateTime  @updatedAt

  // Relations
  user                 User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@map("user_profiles")
}

model RefreshToken {
  id        String   @id @default(cuid())
  token     String   @unique
  userId    String
  expiresAt DateTime
  createdAt DateTime @default(now())

  // Relations
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@map("refresh_tokens")
}

model Organization {
  id          String             @id @default(cuid())
  name        String
  type        String             // 'sme' | 'funder' | 'government' | 'ngo'
  status      String             @default("active") // 'active' | 'inactive' | 'suspended'
  description String?
  website     String?
  phone       String?
  email       String?
  logo        String?
  settings    String?            // JSON string for SQLite compatibility
  createdAt   DateTime           @default(now())
  updatedAt   DateTime           @updatedAt

  // Relations
  organizationUsers OrganizationUser[]
  opportunities     Opportunity[]
  applications      Application[]
  
  @@map("organizations")
}

model OrganizationUser {
  id             String   @id @default(cuid())
  userId         String
  organizationId String
  role           String
  permissions    String   // JSON string for SQLite compatibility
  isActive       Boolean  @default(true)
  joinedAt       DateTime @default(now())
  updatedAt      DateTime @updatedAt

  // Relations
  user           User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  
  @@unique([userId, organizationId])
  @@map("organization_users")
}

model Opportunity {
  id               String              @id @default(cuid())
  title            String
  description      String
  fundingType      String              // 'grant' | 'loan' | 'equity' | 'convertible' | 'revenue_share'
  minAmount        Int
  maxAmount        Int
  currency         String              @default("ZAR")
  status           String              @default("active") // 'draft' | 'active' | 'paused' | 'closed' | 'cancelled'
  deadline         DateTime?
  requirements     String              // JSON string for structured requirements
  terms            String?             // JSON string for funding terms
  organizationId   String
  createdBy        String
  publishedAt      DateTime?
  closedAt         DateTime?
  createdAt        DateTime            @default(now())
  updatedAt        DateTime            @updatedAt

  // Relations
  organization     Organization        @relation(fields: [organizationId], references: [id])
  applications     Application[]
  
  @@map("opportunities")
}

model Application {
  id                String              @id @default(cuid())
  opportunityId     String
  applicantId       String
  organizationId    String?
  title             String
  description       String
  requestedAmount   Int
  currency          String              @default("ZAR")
  status            String              @default("draft") // 'draft' | 'submitted' | 'under_review' | 'in_due_diligence' | 'approved' | 'rejected' | 'withdrawn'
  stage             String              @default("submission") // 'submission' | 'initial_review' | 'due_diligence' | 'committee_review' | 'decision' | 'funding' | 'completed'
  data              String              // JSON string for application form data
  documents         String?             // JSON string for document references
  reviewNotes       String?             // JSON string for reviewer notes
  terms             String?             // JSON string for proposed terms
  submittedAt       DateTime?
  reviewStartedAt   DateTime?
  decidedAt         DateTime?
  createdAt         DateTime            @default(now())
  updatedAt         DateTime            @updatedAt

  // Relations
  opportunity       Opportunity         @relation(fields: [opportunityId], references: [id])
  applicant         User                @relation(fields: [applicantId], references: [id])
  organization      Organization?       @relation(fields: [organizationId], references: [id])
  
  @@map("applications")
}